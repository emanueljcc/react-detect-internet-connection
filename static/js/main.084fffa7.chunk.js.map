{"version":3,"sources":["../../src/hooks/useNetworkStatus.js","App.js","index.js"],"names":["getConnection","navigator","getConnectionInfo","connection","rtt","type","saveData","downlink","downlinkMax","effectiveType","useState","updateDate","isOnline","useEffect","handleOnline","setState","prev","Date","toString","handleOffline","handleConnectionChange","window","App","useNetworkStatus","console","log","className","width","target","rel","href","ReactDOM","render","document","getElementById"],"mappings":"yOAGMA,EAAgB,WACpB,OACEC,sBACAA,UADAA,eAEAA,UAFAA,kBADF,MAQIC,EAAoB,WACxB,IAAMC,EAAaH,IAEnB,SAEO,CACLI,IAAKD,EADA,IAELE,KAAMF,EAFD,KAGLG,SAAUH,EAHL,SAILI,SAAUJ,EAJL,SAKLK,YAAaL,EALR,YAMLM,cAAeN,EAAWM,eARJ,I,EAgBD,WACvB,MAA0BC,oBAAS,WACjC,oBACEC,gBADK,EAELC,SAAUX,UAFL,QAGFC,QAJP,mBAAM,EAAN,KAAM,EAAN,KA2CA,OAnCAW,qBAAU,WACR,IAAMC,EAAe,WACnBC,GAAUC,YAAD,mBAAC,eAAU,GAAX,IAEPJ,UAFkB,EAGlBD,YAAY,IAAIM,MAAOC,iBAGrBC,EAAgB,WACpBJ,GAAUC,YAAD,mBAAC,eAAU,GAAX,IAEPJ,UAFkB,EAGlBD,YAAY,IAAIM,MAAOC,iBAGrBE,EAAyB,WAC7BL,GAAUC,YAAD,mBAAC,eAAU,GAEfd,SAGPmB,oCACAA,qCACA,IAAMlB,EAAaH,IAInB,OAFAG,eAAU,IAAVA,kCAEO,WACLkB,uCACAA,wCAEAlB,eAAU,IAAVA,wCA/BJU,IAmCA,GCCaS,EAzEH,WACV,MASIC,IARFX,EADF,EACEA,SACAD,EAFF,EAEEA,WACAP,EAHF,EAGEA,IACAC,EAJF,EAIEA,KACAC,EALF,EAKEA,SACAC,EANF,EAMEA,SACAC,EAPF,EAOEA,YACAC,EARF,EAQEA,cAKF,OAFAe,QAAQC,IAAI,6BAA8BF,KAGxC,oCACE,wBAAIG,UAAU,UAAd,OACA,yBAAKA,UAAU,WACb,+BACE,+BACE,4BACE,wBAAIC,MAAO,KAAX,YACA,wBAAIA,MAAO,IAAKD,UAAU,UACxB,0BAAMA,UAAWd,EAAW,KAAO,SAErC,kGAEF,4BACE,0CACA,4BAAKD,GAAc,KACnB,gHAEF,4BACE,mCACA,4BAAKP,GACL,+JAEF,4BACE,oCACA,4BAAKC,GAAQ,KACb,2NAEF,4BACE,wCACA,4BAAKC,EAAW,OAAS,SACzB,gHAEF,4BACE,wCACA,4BAAKC,GACL,6JAEF,4BACE,2CACA,4BAAKC,GAAe,KACpB,6IAEF,4BACE,6CACA,4BAAKC,GACL,sOAKR,6BACA,yBAAKiB,UAAU,UACb,uBAAGE,OAAO,SAASC,IAAI,sBAAsBC,KAAK,uEAAlD,2BChERC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.084fffa7.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\n\n// https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\nconst getConnection = () => {\n  return (\n    navigator.connection ||\n    navigator.mozConnection ||\n    navigator.webkitConnection ||\n    null\n  )\n}\n\nconst getConnectionInfo = () => {\n  const connection = getConnection()\n\n  if (!connection) return {}\n\n  return {\n    rtt: connection.rtt,\n    type: connection.type,\n    saveData: connection.saveData,\n    downlink: connection.downlink,\n    downlinkMax: connection.downlinkMax,\n    effectiveType: connection.effectiveType\n  }\n}\n\n/**\n * Detect connection online/offline\n * @returns {void}\n */\nconst useNetworkStatus = () => {\n  const [state, setState] = useState(() => {\n    return {\n      updateDate: undefined,\n      isOnline: navigator.onLine,\n      ...getConnectionInfo()\n    }\n  })\n\n  useEffect(() => {\n    const handleOnline = () => {\n      setState((prev) => ({\n        ...prev,\n        isOnline: true,\n        updateDate: new Date().toString()\n      }))\n    }\n    const handleOffline = () => {\n      setState((prev) => ({\n        ...prev,\n        isOnline: false,\n        updateDate: new Date().toString()\n      }))\n    }\n    const handleConnectionChange = () => {\n      setState((prev) => ({\n        ...prev,\n        ...getConnectionInfo()\n      }))\n    }\n    window.addEventListener('online', handleOnline)\n    window.addEventListener('offline', handleOffline)\n    const connection = getConnection()\n    // eslint-disable-next-line no-unused-expressions\n    connection?.addEventListener('change', handleConnectionChange)\n\n    return () => {\n      window.removeEventListener('online', handleOnline)\n      window.removeEventListener('offline', handleOffline)\n      // eslint-disable-next-line no-unused-expressions\n      connection?.removeEventListener('change', handleConnectionChange)\n    }\n  }, [])\n\n  return state\n}\n\nexport default useNetworkStatus\n","import React from 'react'\nimport useNetworkStatus from 'react-detect-internet-connection'\n\nconst App = () => {\n  const {\n    isOnline,\n    updateDate,\n    rtt,\n    type,\n    saveData,\n    downlink,\n    downlinkMax,\n    effectiveType,\n  } = useNetworkStatus()\n\n  console.log(\"useNetworkStatus props => \", useNetworkStatus())\n\n  return (\n    <>\n      <h1 className=\"center\">API</h1>\n      <div className=\"wrapper\">\n        <table>\n          <tbody>\n            <tr>\n              <th width={150}>isOnline</th>\n              <td width={150} className=\"center\">\n                <span className={isOnline ? 'on' : 'off'}></span>\n              </td>\n              <td>Boolean that indicates if there is an internet connection or not.</td>\n            </tr>\n            <tr>\n              <th>updateDate</th>\n              <td>{updateDate || '-'}</td>\n              <td>Date that is updated every time the connection status changes (online/offline).</td>\n            </tr>\n            <tr>\n              <th>rtt</th>\n              <td>{rtt}</td>\n              <td>Returns the estimated effective round-trip time of the current connection, rounded to the nearest multiple of 25 milliseconds.</td>\n            </tr>\n            <tr>\n              <th>type</th>\n              <td>{type || '-'}</td>\n              <td>Returns the type of connection a device is using to communicate with the network. It will be one of the following values: bluetooth, cellular, ethernet, none, wifi, wimax, other, unknown</td>\n            </tr>\n            <tr>\n              <th>saveData</th>\n              <td>{saveData ? 'true' : 'false'}</td>\n              <td>Returns true if the user has set a reduced data usage option on the user agent.</td>\n            </tr>\n            <tr>\n              <th>downlink</th>\n              <td>{downlink}</td>\n              <td>Returns the effective bandwidth estimate in megabits per second, rounded to the nearest multiple of 25 kilobits per seconds.</td>\n            </tr>\n            <tr>\n              <th>downlinkMax</th>\n              <td>{downlinkMax || '-'}</td>\n              <td>Returns the maximum downlink speed, in megabits per second (Mbps), for the underlying connection technology.</td>\n            </tr>\n            <tr>\n              <th>effectiveType</th>\n              <td>{effectiveType}</td>\n              <td>Returns the effective type of the connection meaning one of 'slow-2g', '2g', '3g', or '4g'. This value is determined using a combination of recently observed round-trip time and downlink values.</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <br />\n      <div className=\"center\">\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\">For more information</a>\n      </div>\n    </>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}